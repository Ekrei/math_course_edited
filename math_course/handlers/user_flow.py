import asyncio
from os import getenv
from typing import cast

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, PollAnswer, CallbackQuery, FSInputFile

from math_course import consts
from math_course.entities.video import VIDEOS
from math_course.keyboards.callback import VideoCb
from math_course.keyboards import inline

TOKEN = getenv("BOT_TOKEN")

flow_router = Router()


@flow_router.message(Command("send"))
async def command_send(message: Message):
    await message.answer_video_note(
        video_note=FSInputFile("files/welcome_circle.mp4")
    )

@flow_router.message(Command("start"))
async def command_start(message: Message, bot: Bot):
    await message.answer(
        text=(
            "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å–≤–æ–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        ),
        reply_markup=inline.get_main_menu_keyboard()
    )

@flow_router.message()
async def handle_any_message(message: Message):
    await message.answer(
        text=(
            "üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –∫—É—Ä—Å–µ\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–∞"
        )
    )

@flow_router.callback_query(VideoCb.filter())
async def send_video(query: CallbackQuery, callback_data: VideoCb):
    index = callback_data.index
    video = VIDEOS[index]
    await query.message.answer(
        text="–í–∏–¥–µ–æ —É–∂–µ –≥–æ—Ç–æ–≤—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ –∏–∑—É—á–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª!",
        reply_markup=inline.get_video_keyboard(video),
    )

async def first_lesson(
        poll_answer: PollAnswer,
        correct: bool,
) -> None:
    bot = cast(Bot, poll_answer.bot)

    await bot.send_chat_action(
        chat_id=poll_answer.user.id,
        action="typing",
    )
    await asyncio.sleep(5)
    await poll_answer.bot.send_message(
        chat_id=poll_answer.user.id,
        text=consts.SUCCESS_FIRST_TEST if correct else consts.FAIL_FIRST_TEST,
        reply_markup=inline.get_first_lesson_keyboard(),
    )



@flow_router.callback_query(F.data == "first-lesson-done")
async def first_lesson_done(query: CallbackQuery):
    await query.message.answer(
        text=consts.SECOND_LESSON,
        reply_markup=inline.get_quiz_keyboard(quiz_id=1),
    )
    await query.message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–∫–∞–º:",
        reply_markup=inline.get_previous_lessons_keyboard(1)
    )


async def second_lesson(
        poll_answer: PollAnswer,
        correct: bool,
) -> None:
    bot = cast(Bot, poll_answer.bot)

    await bot.send_chat_action(
        chat_id=poll_answer.user.id,
        action="typing",
    )
    await asyncio.sleep(5)
    
    if correct:
        await poll_answer.bot.send_message(
            chat_id=poll_answer.user.id,
            text=(
                "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ –ø–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º–æ–≤!</b>\n\n"
                "–í–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ, –∏ —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
                f"{consts.THIRD_LESSON}"
            ),
            reply_markup=inline.get_third_lesson_keyboard(),
        )
    else:
        await poll_answer.bot.send_message(
            chat_id=poll_answer.user.id,
            text=consts.FAIL_SECOND_TEST,
            reply_markup=inline.get_second_lesson_keyboard(),
        )

@flow_router.callback_query(F.data == "second-lesson-done")
async def second_lesson_done(query: CallbackQuery):
    await query.message.answer(
        text=(
            "<b>–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∏–¥–µ–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è "
            "–ø–æ —Ç–µ–º–µ –ø–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º–æ–≤.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:"
        ),
        reply_markup=inline.get_quiz_keyboard(quiz_id=1),
    )
    await query.message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–∫–∞–º:",
        reply_markup=inline.get_previous_lessons_keyboard(2)
    )

async def third_lesson(
        poll_answer: PollAnswer,
        correct: bool,
) -> None:
    bot = cast(Bot, poll_answer.bot)

    await bot.send_chat_action(
        chat_id=poll_answer.user.id,
        action="typing",
    )
    await asyncio.sleep(5)
    
    if correct:
        await poll_answer.bot.send_message(
            chat_id=poll_answer.user.id,
            text=(
                "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ —Ç—Ä–∞–ø–µ—Ü–∏—è!</b>\n\n"
                "–í–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ, –∏ —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
                f"{consts.FOURTH_LESSON}"
            ),
            reply_markup=inline.get_fourth_lesson_keyboard(),
        )
    else:
        await poll_answer.bot.send_message(
            chat_id=poll_answer.user.id,
            text=consts.FAIL_THIRD_TEST,
            reply_markup=inline.get_third_lesson_keyboard(),
        )

async def fourth_lesson(
        poll_answer: PollAnswer,
        correct: bool,
) -> None:
    bot = cast(Bot, poll_answer.bot)

    await bot.send_chat_action(
        chat_id=poll_answer.user.id,
        action="typing",
    )
    await asyncio.sleep(5)
    
    if correct:
        await poll_answer.bot.send_message(
            chat_id=poll_answer.user.id,
            text=(
                "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å!</b>\n\n"
                "–í–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ, –∏ —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
                f"{consts.FIFTH_LESSON}"
            ),
            reply_markup=inline.get_fifth_lesson_keyboard(),
        )
    else:
        await poll_answer.bot.send_message(
            chat_id=poll_answer.user.id,
            text=consts.FAIL_FOURTH_TEST,
            reply_markup=inline.get_fourth_lesson_keyboard(),
        )

@flow_router.callback_query(F.data == "third-lesson-done")
async def third_lesson_done(query: CallbackQuery):
    await query.message.answer(
        text=(
            "<b>–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∏–¥–µ–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è "
            "–ø–æ —Ç–µ–º–µ —Ç—Ä–∞–ø–µ—Ü–∏—è.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:"
        ),
        reply_markup=inline.get_quiz_keyboard(quiz_id=2),
    )
    await query.message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–∫–∞–º:",
        reply_markup=inline.get_previous_lessons_keyboard(3)
    )

@flow_router.callback_query(F.data == "fourth-lesson-done")
async def fourth_lesson_done(query: CallbackQuery):
    await query.message.answer(
        text=(
            "<b>–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∏–¥–µ–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è "
            "–ø–æ —Ç–µ–º–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:"
        ),
        reply_markup=inline.get_quiz_keyboard(quiz_id=3),
    )
    await query.message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–∫–∞–º:",
        reply_markup=inline.get_previous_lessons_keyboard(4)
    )

@flow_router.callback_query(F.data == "fifth-lesson-done")
async def fifth_lesson_done(query: CallbackQuery):
    await query.message.answer(
        text=consts.SIXTH_LESSON,
        reply_markup=inline.get_quiz_keyboard(quiz_id=2),
    )
    await query.message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–∫–∞–º:",
        reply_markup=inline.get_previous_lessons_keyboard(5)
    )

async def sixth_lesson(
        poll_answer: PollAnswer,
        correct: bool,
) -> None:
    bot = cast(Bot, poll_answer.bot)

    await bot.send_chat_action(
        chat_id=poll_answer.user.id,
        action="typing",
    )
    await asyncio.sleep(5)
    await poll_answer.bot.send_message(
        chat_id=poll_answer.user.id,
        text=consts.SUCCESS_THIRD_TEST if correct else consts.FAIL_THIRD_TEST,
        reply_markup=inline.get_sixth_lesson_keyboard(),
    )

@flow_router.callback_query(F.data == "sixth-lesson-done")
async def sixth_lesson_done(query: CallbackQuery):
    await query.message.answer(
        text=(
            "<b>–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∏–¥–µ–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è "
            "–ø–æ —Ç–µ–º–µ —Å—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏–∏.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:"
        ),
        reply_markup=inline.get_quiz_keyboard(quiz_id=5),
    )
    await query.message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–∫–∞–º:",
        reply_markup=inline.get_previous_lessons_keyboard(6)
    )

@flow_router.callback_query(F.data == "seventh-lesson-done")
async def seventh_lesson_done(query: CallbackQuery):
    await query.message.answer(
        text=consts.FINAL_TEST,
        reply_markup=inline.get_quiz_keyboard(quiz_id=3),
    )

async def final_test_done(
        poll_answer: PollAnswer,
        _: bool,
) -> None:
    bot = cast(Bot, poll_answer.bot)

    await bot.send_chat_action(
        chat_id=poll_answer.user.id,
        action="typing",
    )
    await asyncio.sleep(5)
    await poll_answer.bot.send_message(
        chat_id=poll_answer.user.id,
        text=consts.FINAL_TEST_DONE,
        reply_markup=inline.get_quiz_keyboard(quiz_id=3),
    )

@flow_router.callback_query(F.data == "start_learning")
async def start_learning(query: CallbackQuery, bot: Bot):
    await query.message.answer(
        text=(
            "<b>üëã –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫—É—Ä—Å–∞ –º—ã –ø—Ä–æ–≤–µ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç, "
            "—á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏.</b>\n"
            "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∏ –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
            " –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
        ),
        reply_markup=inline.get_quiz_keyboard(quiz_id=0),
    )

@flow_router.callback_query(F.data == "about_course")
async def about_course(query: CallbackQuery):
    await query.message.answer(
        text=(
            "<b>–û –∫—É—Ä—Å–µ:</b>\n\n"
            "–≠—Ç–æ—Ç –∫—É—Ä—Å –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
            "‚Ä¢ –û—Å–≤–æ–∏—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏\n"
            "‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º\n\n"
            "–ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:\n"
            "‚Ä¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –í–∏–¥–µ–æ —Å —Ä–∞–∑–±–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤\n"
            "‚Ä¢ –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π"
        ),
        reply_markup=inline.get_main_menu_keyboard()
    )

@flow_router.callback_query(F.data == "course_structure")
async def course_structure(query: CallbackQuery):
    await query.message.answer(
        text=(
            "<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞:</b>\n\n"
            "1. –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –∏ –ø—Ä—è–º—ã–µ\n"
            "2. –ü–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º—ã\n"
            "3. –¢—Ä–∞–ø–µ—Ü–∏—è\n"
            "4. –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å\n"
            "5. –í–µ–∫—Ç–æ—Ä—ã\n"
            "6. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è (–ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥—ã)\n"
            "7. –ü–∏—Ä–∞–º–∏–¥—ã –∏ —Ç–µ—Ç—Ä–∞—ç–¥—Ä—ã\n\n"
            "<i>–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:\n"
            "‚Ä¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –í–∏–¥–µ–æ —Å —Ä–∞–∑–±–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤</i>"
        ),
        reply_markup=inline.get_main_menu_keyboard()
    )

@flow_router.callback_query(F.data.startswith("return_to_lesson_"))
async def return_to_lesson(query: CallbackQuery):
    lesson_number = int(query.data.split("_")[-1])
    
    # Map lesson numbers to their respective texts and keyboards
    lesson_data = {
        1: (consts.FIRST_LESSON, inline.get_first_lesson_keyboard()),
        2: (consts.SECOND_LESSON, inline.get_second_lesson_keyboard()),
        3: (consts.THIRD_LESSON, inline.get_third_lesson_keyboard()),
        4: (consts.FOURTH_LESSON, inline.get_fourth_lesson_keyboard()),
        5: (consts.FIFTH_LESSON, inline.get_fifth_lesson_keyboard()),
        6: (consts.SIXTH_LESSON, inline.get_sixth_lesson_keyboard()),
        7: (consts.SEVENTH_LESSON, inline.get_seventh_lesson_keyboard()),
    }
    
    if lesson_number in lesson_data:
        text, keyboard = lesson_data[lesson_number]
        await query.message.answer(text=text, reply_markup=keyboard)